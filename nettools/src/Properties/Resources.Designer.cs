//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace nettools.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("nettools.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] libeay32_32 {
            get {
                object obj = ResourceManager.GetObject("libeay32_32", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] libeay32_64 {
            get {
                object obj = ResourceManager.GetObject("libeay32_64", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] openssl_cnf {
            get {
                object obj = ResourceManager.GetObject("openssl_cnf", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///  LICENSE ISSUES
        ///  ==============
        ///
        ///  The OpenSSL toolkit stays under a dual license, i.e. both the conditions of
        ///  the OpenSSL License and the original SSLeay license apply to the toolkit.
        ///  See below for the actual license texts. Actually both licenses are BSD-style
        ///  Open Source licenses. In case of any license issues related to OpenSSL
        ///  please contact openssl-core@openssl.org.
        ///
        ///  OpenSSL License
        ///  ---------------
        ///
        ////* ====================================================================
        /// * Copyright (c)  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string OpenSSL_License {
            get {
                return ResourceManager.GetString("OpenSSL_License", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] ssleay32_32 {
            get {
                object obj = ResourceManager.GetObject("ssleay32_32", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] ssleay32_64 {
            get {
                object obj = ResourceManager.GetObject("ssleay32_64", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ;WHOIS Servers List
        ///;Maintained by Nir Sofer
        ///;This servers list if freely available for any use and without any restriction. 
        ///;For more information: http://www.nirsoft.net/whois_servers_list.html
        ///;Last updated on 09/03/2014
        ///ac whois.nic.ac
        ///ae whois.aeda.net.ae
        ///aero whois.aero
        ///af whois.nic.af
        ///ag whois.nic.ag
        ///al whois.ripe.net
        ///am whois.amnic.net
        ///as whois.nic.as
        ///asia whois.nic.asia
        ///at whois.nic.at
        ///au whois.aunic.net
        ///ax whois.ax 
        ///az whois.ripe.net
        ///ba whois.ripe.net
        ///be whois.dns.be
        ///bg whois.register.bg
        ///bi whois. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string whoisservers {
            get {
                return ResourceManager.GetString("whoisservers", resourceCulture);
            }
        }
    }
}
